{"version":3,"file":"component---src-templates-blog-tags-js-8d9178c65e5a1c5ede78.js","mappings":"iPAMmC,IAEdA,EAAQ,SAAAC,GAAA,SAAAD,IAAA,OAAAC,EAAAC,MAAA,KAAAC,YAAA,KAsD1B,OAtD0BC,EAAAA,EAAAA,GAAAJ,EAAAC,GAAAD,EAAAK,UAC3BC,OAAA,WACE,MAAM,MAAEC,EAAK,WAAEC,GAAeC,KAAKC,MAAMC,KAAKC,OACxCC,EAAOJ,KAAKC,MAAMC,KAAKG,SAASC,MAGtC,OAFAC,QAAQC,IAAI,UAAWV,GAGrBW,EAAAA,cAACC,EAAAA,EAAK,KACJD,EAAAA,cAAA,OAAKE,UAAU,0DACbF,EAAAA,cAAA,OAAKE,UAAU,cACbF,EAAAA,cAAA,MAAIE,UAAU,sDACZF,EAAAA,cAAA,OAAKE,UAAU,wBACZ,GAAGZ,SAAiC,IAAfA,EAAmB,GAAK,OAEhDU,EAAAA,cAAA,WAAM,gBAAgBG,IAAaZ,KAAKC,MAAMY,YAAYC,UAE5DL,EAAAA,cAAA,OAAKE,UAAU,6BACZb,EAAMiB,KAAIC,IAAe,IAAd,KAAEC,GAAMD,EAClB,OACEP,EAAAA,cAAA,OAAKS,IAAKD,EAAKE,GAAIR,UAAU,mDAC3BF,EAAAA,cAACW,EAAAA,KAAI,CAACC,GAAI,QAAQJ,EAAKK,OAAOC,QAC5Bd,EAAAA,cAAA,MAAIE,UAAU,0DACXM,EAAKO,YAAYC,QAGtBhB,EAAAA,cAAA,UAAKQ,EAAKO,YAAYE,MACtBjB,EAAAA,cAAA,KAAGE,UAAU,iBAAiBM,EAAKU,SAC/B,MAKdlB,EAAAA,cAAA,OAAKE,UAAU,4BACbF,EAAAA,cAAA,OAAKE,UAAU,0BACbF,EAAAA,cAACW,EAAAA,KAAI,CAACC,GAAG,SACPZ,EAAAA,cAAA,OAAKE,UAAU,6HAA4H,cAI7IF,EAAAA,cAAA,OAAKE,UAAU,6EACbF,EAAAA,cAAA,UACEA,EAAAA,cAAA,cAAQ,aAEVA,EAAAA,cAAA,OAAKE,UAAU,wBACZP,EAAKW,KAAKD,GACTL,EAAAA,cAACmB,EAAAA,EAAQ,CAACV,IAAKJ,EAAIe,WAAYf,IAAKA,WAStD,EAACvB,CAAA,CAtD0B,CAASkB,EAAAA,WAgF/B,SAASqB,EAAIC,GAAY,IAAX,KAAE7B,GAAM6B,EAC3B,OACEtB,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,aAAQ,eAAeP,EAAK8B,KAAKC,KAAKR,SACtChB,EAAAA,cAAA,QAAMyB,KAAK,cAAcC,QAAS,GAAGjC,EAAK8B,KAAKC,KAAKG,gBAAgBlC,EAAK8B,KAAKC,KAAKI,WACnF5B,EAAAA,cAAA,QAAMyB,KAAK,WAAWC,QAAQ,8DAGpC,C,uBChGA,IAAIG,EAAW,EAAQ,MACnBC,EAAa,EAAQ,MAqBzBC,EAAOC,QAJP,SAAoBC,GAClB,OAAOH,EAAWD,EAASI,GAAQC,cACrC,C,iGCPA,IATiB3B,IAAA,IAAC,IAAEF,GAAKE,EAAA,OACvBP,EAAAA,cAAA,OAAK,aAAW,OAAOS,IAAKJ,EAAIe,YAC9BpB,EAAAA,cAACW,EAAAA,KAAI,CAACC,GAAI,SAASuB,IAAY9B,EAAIe,eAAgBlB,UAAU,mCAC1DkC,IAAY/B,EAAIe,YACjBpB,EAAAA,cAAA,QAAME,UAAU,0GAA0GG,EAAIf,aAE5H,C,uBCVR,IAuBI+C,EAvBmB,EAAQ,KAuBfC,EAAiB,SAASC,EAAQC,EAAMC,GACtD,OAAOF,GAAUE,EAAQ,IAAM,IAAMD,EAAKN,aAC5C,IAEAH,EAAOC,QAAUK,C","sources":["webpack://myfol/./src/templates/blog-tags.js","webpack://myfol/./node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/capitalize.js","webpack://myfol/./src/components/tags-link.js","webpack://myfol/./node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/kebabCase.js"],"sourcesContent":["import * as React from \"react\"\nimport _ from \"lodash\";\nimport PropTypes from \"prop-types\"\nimport { Link, graphql } from \"gatsby\"\n// import { useSiteMetadata } from \"../hooks/use-site-metadata\";\nimport TagsLink from \"../components/tags-link\"\nimport Frame from '../layouts/main'\n\nexport default class BlogTags extends React.Component {\n  render() {\n    const { edges, totalCount } = this.props.data.allMdx\n    const tags = this.props.data.tagPosts.group\n    console.log(\"context\", edges)\n\n    return (\n      <Frame>\n        <div className=\"mx-4 lg:mx-16 lg:grid gap-4 grid-flow-col grid-cols-10\">\n          <div className=\"col-span-8\">\n            <h4 className=\"flex justify-center gap-2 text-lg lg:text-2xl mb-6\">\n              <div className=\"italic font-semibold\">\n                {`${totalCount} Post${totalCount === 1 ? \"\" : \"s\"}`}\n              </div>\n              <div>{`tagged with \"${_.capitalize(this.props.pageContext.tag)}\"`}</div>\n            </h4>\n            <div className=\"grid md:grid-cols-2 gap-2\">\n              {edges.map(({ node }) => {\n                return (\n                  <div key={node.id} className=\"p-4 rounded-lg border border-gray-300 shadow-lg\"                >\n                    <Link to={`/blog${node.fields.slug}`}>\n                      <h4 className=\"mb-2 leading-5 text-neutral font-semibold link-primary\">\n                        {node.frontmatter.title}\n                      </h4>\n                    </Link>\n                    <h5>{node.frontmatter.date}</h5>\n                    <p className=\"text-gray-500\">{node.excerpt}</p>\n                  </div>\n                )\n              })}\n            </div>\n          </div>\n          <div className=\"col-span-2 mt-8 lg:mt-14\">\n            <div className=\"sticky top-2 space-y-4\">\n              <Link to=\"/blog\">\n                <div className=\"w-full font-semibold rounded-lg bg-inherit hover:bg-neutral-content hover:text-neutral-focus shadow-md shadow-current p-4\">\n                  All Posts\n                </div>\n              </Link>\n              <div className=\"rounded-lg bg-inherit shadow-md shadow-current p-4 mt-2 lg:mt-0 space-y-2\">\n                <h4>\n                  <strong>All Tags</strong>\n                </h4>\n                <div className=\"flex flex-wrap gap-2\">\n                  {tags.map((tag) => (\n                    <TagsLink key={tag.fieldValue} tag={tag} />\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Frame>\n    )\n  }\n}\n\nBlogTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMdx: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport function Head({ data }) {\n  return (\n    <>\n      <title>{`Blog Tags | ${data.site.meta.title}`}</title>\n      <meta name=\"description\" content={`${data.site.meta.desc} tags by ${data.site.meta.author}`} />\n      <meta name=\"keywords\" content=\"blog, travel, hobby, daliy, activity, coding, photography\" />\n    </>\n  )\n}\n\nexport const tagQuery = graphql`query ($tag: String) {\n  site {\n    meta: siteMetadata {\n      title\n      author\n      desc\n    }\n  }\n  allMdx(\n    limit: 2000\n    sort: {frontmatter: {date: DESC}}\n    filter: {frontmatter: {tags: {in: [$tag]}}}\n  ) {\n    totalCount\n    edges {\n      node {\n        id\n        fields {\n          slug\n        }\n        excerpt(pruneLength: 250)\n        frontmatter {\n          title\n          date(formatString: \"dddd, Do MMMM YYYY\", locale: \"id-ID\")\n          tags\n        }\n      }\n    }\n  }\n  tagPosts: allMdx(limit: 2000) {\n    group(field: {frontmatter: {tags: SELECT}}) {\n      fieldValue\n      totalCount\n    }\n  }\n}`\n","var toString = require('./toString'),\n    upperFirst = require('./upperFirst');\n\n/**\n * Converts the first character of `string` to upper case and the remaining\n * to lower case.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to capitalize.\n * @returns {string} Returns the capitalized string.\n * @example\n *\n * _.capitalize('FRED');\n * // => 'Fred'\n */\nfunction capitalize(string) {\n  return upperFirst(toString(string).toLowerCase());\n}\n\nmodule.exports = capitalize;\n","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport _ from \"lodash\"\n\nconst TagsLink = ({ tag }) => (\n  <div aria-label=\"tags\" key={tag.fieldValue}>\n    <Link to={`/tags/${_.kebabCase(tag.fieldValue)}/`} className=\"hover:text-sky-500 text-current\">\n      {_.startCase(tag.fieldValue)}\n      <span className=\"badge text-neutral-focus bg-neutral-content border-neutral-focus transform -translate-y-1 text-xs ml-1\">{tag.totalCount}</span>\n    </Link>\n  </div>\n)\n\nexport default TagsLink","var createCompounder = require('./_createCompounder');\n\n/**\n * Converts `string` to\n * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the kebab cased string.\n * @example\n *\n * _.kebabCase('Foo Bar');\n * // => 'foo-bar'\n *\n * _.kebabCase('fooBar');\n * // => 'foo-bar'\n *\n * _.kebabCase('__FOO_BAR__');\n * // => 'foo-bar'\n */\nvar kebabCase = createCompounder(function(result, word, index) {\n  return result + (index ? '-' : '') + word.toLowerCase();\n});\n\nmodule.exports = kebabCase;\n"],"names":["BlogTags","_React$Component","apply","arguments","_inheritsLoose","prototype","render","edges","totalCount","this","props","data","allMdx","tags","tagPosts","group","console","log","React","Frame","className","_capitalize","pageContext","tag","map","_ref","node","key","id","Link","to","fields","slug","frontmatter","title","date","excerpt","TagsLink","fieldValue","Head","_ref2","site","meta","name","content","desc","author","toString","upperFirst","module","exports","string","toLowerCase","_kebabCase","_startCase","kebabCase","createCompounder","result","word","index"],"sourceRoot":""}