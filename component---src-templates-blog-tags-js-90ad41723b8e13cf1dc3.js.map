{"version":3,"file":"component---src-templates-blog-tags-js-90ad41723b8e13cf1dc3.js","mappings":"gKAaA,IATiB,SAAC,GAAD,IAAGA,EAAH,EAAGA,IAAH,OACf,uBAAKC,IAAKD,EAAIE,WAAYC,UAAU,6BAClC,gBAAC,EAAAC,KAAD,CAAMC,GAAE,SAAW,IAAYL,EAAIE,YAA3B,KACL,IAAYF,EAAIE,YACjB,wBAAMC,UAAU,2FAA2FH,EAAIM,aAJpG,C,sJC8FjB,UA1FiB,SAAC,GAST,IAAD,IAPJC,KACeC,EAMX,EANFC,UAAaD,MACbE,EAKE,EALFA,kBACAC,EAIE,EAJFA,KACAC,EAGE,EAHFA,gBAIIZ,EADF,EADJa,YAEMb,IACAc,EAAsBJ,EAAtBI,MAAOR,EAAeI,EAAfJ,WACTS,EAAOP,EACVQ,KAAI,SAAAhB,GAAG,OAAI,gBAAC,IAAD,CAAUC,IAAKD,EAAIE,WAAYF,IAAKA,GAAxC,IAGV,OACE,2BACE,uBAAKG,UAAU,iBACb,gBAAC,IAAD,CAAQc,UAAWN,EAAKO,KAAKD,UAAWE,WAAYP,EAAgBQ,SAEtE,uBAAKjB,UAAU,0DACb,uBAAKA,UAAU,cACb,sBAAIA,UAAU,sDACZ,uBAAKA,UAAU,wBAA2BG,EAA1C,SAA2E,IAAfA,EAAmB,GAAK,MACpF,2CAAsB,IAAaN,GAAnC,MAEF,uBAAKG,UAAU,6BACZW,EAAME,KAAI,YAAe,IAAZK,EAAW,EAAXA,KACJC,EAASD,EAAKE,OAAdD,KACAE,EAAYH,EAAZG,QACR,EAAwBH,EAAKI,YAArBC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,KACf,OACE,uBAAK1B,IAAKqB,EAAMnB,UAAU,mDACxB,gBAAC,EAAAC,KAAD,CAAMC,GAAE,QAAUiB,GAChB,sBAAInB,UAAU,0DAA0DuB,IAE1E,0BAAKC,GACL,qBAAGxB,UAAU,iBAAiBqB,GAGnC,MAGL,uBAAKrB,UAAU,4BACb,uBAAKA,UAAU,0BACb,gBAAC,EAAAC,KAAD,CAAMC,GAAG,SACP,uBAAKF,UAAU,mGAAf,cAIF,uBAAKA,UAAU,+DACb,0BAAI,2CACJ,uBAAKA,UAAU,wBACZY,OAMX,2BACE,gBAAC,IAAD,CAAQa,QAASjB,EAAKO,KAAKU,QAASC,UAAWlB,EAAKO,KAAKQ,SAIhE,EA2BM,IAAMI,EAAO,SAAC,GAAD,IAAmBZ,EAAnB,EAAGX,KAAQI,KAAQO,KAAUL,EAA7B,EAA6BA,YAA7B,OAClB,gCACE,6BAAW,IAAaA,EAAYb,KAApC,kBAA0DkB,EAAKQ,OAC/D,wBAAMK,KAAK,cAAcC,QAAYd,EAAKe,KAAV,OAAqBf,EAAKgB,SAC1D,wBAAMH,KAAK,WAAWC,QAAQ,8DAJd,C,uBCpGpB,IAAIG,EAAW,EAAQ,MACnBC,EAAa,EAAQ,MAqBzBC,EAAOC,QAJP,SAAoBC,GAClB,OAAOH,EAAWD,EAASI,GAAQC,cACrC,C,uBCpBA,IAuBIC,EAvBmB,EAAQ,KAuBfC,EAAiB,SAASC,EAAQC,EAAMxB,GACtD,OAAOuB,GAAUvB,EAAQ,IAAM,IAAMwB,EAAKJ,aAC5C,IAEAH,EAAOC,QAAUG,C","sources":["webpack://myfol/./src/components/tags-link.js","webpack://myfol/./src/templates/blog-tags.js","webpack://myfol/./node_modules/lodash/capitalize.js","webpack://myfol/./node_modules/lodash/kebabCase.js"],"sourcesContent":["import React from \"react\"\r\nimport { Link } from \"gatsby\"\r\nimport _ from \"lodash\"\r\n\r\nconst TagsLink = ({ tag }) => (\r\n  <div key={tag.fieldValue} className=\"link-primary text-neutral\">\r\n    <Link to={`/tags/${_.kebabCase(tag.fieldValue)}/`} >\r\n      {_.startCase(tag.fieldValue)}\r\n      <span className=\"badge bg-amber-300 border-amber-300 text-gray-800 transform -translate-y-1 text-xs ml-1\">{tag.totalCount}</span>\r\n    </Link>\r\n  </div>\r\n)\r\n\r\nexport default TagsLink","import * as React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { Link, graphql } from \"gatsby\"\r\nimport _ from \"lodash\"\r\nimport Navbar from \"../components/navbar\"\r\nimport Footer from \"../components/footer\"\r\nimport TagsLink from \"../components/tags-link\"\r\n\r\nconst BlogTags = (\r\n  {\r\n    data: {\r\n      tagsPosts: { group },\r\n      allMarkdownRemark,\r\n      site,\r\n      siteSearchIndex\r\n    },\r\n    pageContext,\r\n  }) => {\r\n  const { tag } = pageContext\r\n  const { edges, totalCount } = allMarkdownRemark\r\n  const Tags = group\r\n    .map(tag => <TagsLink key={tag.fieldValue} tag={tag} />)\r\n  // const tagHeader = `${totalCount} post${totalCount === 1 ? \"\" : \"s\"} tagged with \"${tag}\"`\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"mx-4 lg:mx-16\">\r\n        <Navbar menuLinks={site.meta.menuLinks} searchData={siteSearchIndex.index} />\r\n      </div>\r\n      <div className=\"mx-4 lg:mx-16 lg:grid gap-4 grid-flow-col grid-cols-10\">\r\n        <div className=\"col-span-8\">\r\n          <h4 className=\"flex justify-center gap-2 text-lg lg:text-2xl mb-6\">\r\n            <div className=\"italic font-semibold\">{`${totalCount} Post${totalCount === 1 ? \"\" : \"s\"}`}</div>\r\n            <div>{`tagged with \"${_.capitalize(tag)}\"`}</div>\r\n          </h4>\r\n          <div className=\"grid md:grid-cols-2 gap-2\">\r\n            {edges.map(({ node }) => {\r\n              const { slug } = node.fields\r\n              const { excerpt } = node\r\n              const { title, date } = node.frontmatter\r\n              return (\r\n                <div key={slug} className=\"p-4 rounded-lg border border-gray-300 shadow-lg\">\r\n                  <Link to={`/blog${slug}`}>\r\n                    <h4 className=\"mb-2 leading-5 text-neutral font-semibold link-primary\">{title}</h4>\r\n                  </Link>\r\n                  <h5>{date}</h5>\r\n                  <p className=\"text-gray-500\">{excerpt}</p>\r\n                </div>\r\n              )\r\n            })}\r\n          </div>\r\n        </div>\r\n        <div className=\"col-span-2 mt-8 lg:mt-14\">\r\n          <div className=\"sticky top-2 space-y-4\">\r\n            <Link to=\"/blog\">\r\n              <div className=\"w-full font-semibold rounded-lg bg-gray-200 hover:bg-gray-600 hover:text-gray-100 shadow-lg p-4\">\r\n                All Posts\r\n              </div>\r\n            </Link>\r\n            <div className=\"rounded-lg bg-gray-200 shadow-lg p-4 mt-2 lg:mt-0 space-y-2\">\r\n              <h4><strong>All Tags</strong></h4>\r\n              <div className=\"flex flex-wrap gap-2\">\r\n                {Tags}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <Footer socials={site.meta.socials} siteTitle={site.meta.title} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nBlogTags.propTypes = {\r\n  pageContext: PropTypes.shape({\r\n    tag: PropTypes.string.isRequired,\r\n  }),\r\n  data: PropTypes.shape({\r\n    allMarkdownRemark: PropTypes.shape({\r\n      totalCount: PropTypes.number.isRequired,\r\n      edges: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          node: PropTypes.shape({\r\n            frontmatter: PropTypes.shape({\r\n              title: PropTypes.string.isRequired,\r\n            }),\r\n            fields: PropTypes.shape({\r\n              slug: PropTypes.string.isRequired,\r\n            }),\r\n          }),\r\n        }).isRequired\r\n      ),\r\n    }),\r\n  }),\r\n}\r\n\r\nexport default BlogTags\r\n\r\nexport const Head = ({ data: { site: { meta } }, pageContext }) => (\r\n  <>\r\n    <title>{`${_.capitalize(pageContext.tag)} | Blog Tags | ${meta.title}`}</title>\r\n    <meta name='description' content={`${meta.desc} by ${meta.author}`} />\r\n    <meta name='keywords' content='blog, travel, hobby, daliy, activity, coding, photography' />\r\n  </>\r\n)\r\n\r\nexport const tagQuery = graphql`\r\n  query($tag: String) {\r\n    allMarkdownRemark(\r\n      limit: 2000\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: { frontmatter: { tags: { in: [$tag] } } }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          fields {\r\n            slug\r\n          }\r\n          excerpt(pruneLength: 250)\r\n          frontmatter {\r\n            title\r\n            date(formatString: \"dddd, Do MMMM YYYY\", locale: \"id-ID\")\r\n            tags\r\n          }\r\n        }\r\n      }\r\n    }\r\n    tagsPosts: allMarkdownRemark(limit: 2000) {\r\n      group(field: frontmatter___tags) {\r\n        fieldValue\r\n        totalCount\r\n      }\r\n    }\r\n    site {\r\n      meta: siteMetadata { \r\n        title\r\n        desc\r\n        author     \r\n        menuLinks {\r\n          name\r\n          link\r\n        }\r\n        socials {\r\n          name\r\n          url\r\n        }\r\n      }\r\n    }\r\n    siteSearchIndex {\r\n      index\r\n    }\r\n  }\r\n`","var toString = require('./toString'),\n    upperFirst = require('./upperFirst');\n\n/**\n * Converts the first character of `string` to upper case and the remaining\n * to lower case.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to capitalize.\n * @returns {string} Returns the capitalized string.\n * @example\n *\n * _.capitalize('FRED');\n * // => 'Fred'\n */\nfunction capitalize(string) {\n  return upperFirst(toString(string).toLowerCase());\n}\n\nmodule.exports = capitalize;\n","var createCompounder = require('./_createCompounder');\n\n/**\n * Converts `string` to\n * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the kebab cased string.\n * @example\n *\n * _.kebabCase('Foo Bar');\n * // => 'foo-bar'\n *\n * _.kebabCase('fooBar');\n * // => 'foo-bar'\n *\n * _.kebabCase('__FOO_BAR__');\n * // => 'foo-bar'\n */\nvar kebabCase = createCompounder(function(result, word, index) {\n  return result + (index ? '-' : '') + word.toLowerCase();\n});\n\nmodule.exports = kebabCase;\n"],"names":["tag","key","fieldValue","className","Link","to","totalCount","data","group","tagsPosts","allMarkdownRemark","site","siteSearchIndex","pageContext","edges","Tags","map","menuLinks","meta","searchData","index","node","slug","fields","excerpt","frontmatter","title","date","socials","siteTitle","Head","name","content","desc","author","toString","upperFirst","module","exports","string","toLowerCase","kebabCase","createCompounder","result","word"],"sourceRoot":""}