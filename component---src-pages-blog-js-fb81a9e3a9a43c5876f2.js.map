{"version":3,"file":"component---src-pages-blog-js-fb81a9e3a9a43c5876f2.js","mappings":"8JAaA,IATiB,SAAC,GAAD,IAAGA,EAAH,EAAGA,IAAH,OACf,uBAAKC,IAAKD,EAAIE,WAAYC,UAAU,6BAClC,gBAAC,EAAAC,KAAD,CAAMC,GAAE,SAAW,IAAYL,EAAIE,YAA3B,KACL,IAAYF,EAAIE,YACjB,wBAAMC,UAAU,2FAA2FH,EAAIM,aAJpG,C,gJC8BjB,EA9BiB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAT,OACf,uBAAKL,UAAU,0DACb,sBAAIA,UAAU,0CACZ,gBAAC,EAAAC,KAAD,CAAMC,GAAE,QAAUE,EAAKE,OAAOC,MAC3BH,EAAKI,YAAYC,QAGtB,uBAAKT,UAAU,cACZI,EAAKI,YAAYE,KAAKC,KAAI,SAAAd,GAAG,OAC5B,uBAAKC,IAAKD,GACR,gBAAC,EAAAI,KAAD,CAAMC,GAAE,SAAWL,GACjB,yBAAOG,UAAU,kEAAkE,IAAYH,KAHvE,KAQhC,uBAAKG,UAAU,mBACb,qBAAGA,UAAU,sBAAb,MAAsCI,EAAKI,YAAYH,OAASD,EAAKI,YAAYH,OAASA,GAC1F,qBAAGL,UAAU,yCACb,6BAAQI,EAAKI,YAAYI,OAE3B,2BACGR,EAAKS,QAAL,IACD,gBAAC,EAAAZ,KAAD,CAAMC,GAAE,QAAUE,EAAKE,OAAOC,KAAQP,UAAU,sBAAhD,cAvBW,E,mBC2DjB,EAvDkB,SAAC,GAOV,IAAD,IANJc,KACAC,EAKI,EALJA,gBACqBC,EAIjB,EAJJC,kBAAqBD,MACRE,EAGT,EAHJC,UAAaD,MACLE,EAEJ,EAFJC,KAAQD,KAGJE,EAAQN,EACXO,QAAO,SAAAC,GAAI,QAAMA,EAAKC,KAAKjB,YAAYI,IAA5B,IACXD,KAAI,SAAAa,GAAI,OAAI,gBAAC,EAAD,CAAU1B,IAAK0B,EAAKC,KAAKC,GAAItB,KAAMoB,EAAKC,KAAMpB,OAAQe,EAAKf,QAA/D,IACLsB,EAAOT,EACVP,KAAI,SAAAd,GAAG,OAAI,gBAAC,IAAD,CAAUC,IAAKD,EAAIE,WAAYF,IAAKA,GAAxC,IAMV,OACE,2BACE,gBAAC+B,EAAA,EAAD,CACEnB,MAAK,WAAaW,EAAKX,MACvBW,KAAM,CACJ,CAAES,KAAM,cAAeC,QAAYV,EAAKW,KAAV,OAAqBX,EAAKf,QACxD,CAAEwB,KAAM,WAAYC,QAAS,gEAIjC,uBAAK9B,UAAU,gEACb,gBAAC,IAAD,CAAQgC,UAAWZ,EAAKY,UAAWC,WAAYlB,EAAgBmB,SAEjE,uBAAKlC,UAAU,2CACb,uBAAKmC,MAnBK,CACdC,gBACE,kFAiBuBpC,UAAU,2CAC7B,uBAAKA,UAAU,wFACb,sBAAIA,UAAU,wEAAd,2BAIN,uBAAKA,UAAU,yEACb,uBAAKA,UAAU,cACb,2BACE,kCACC2B,IAGL,uBAAK3B,UAAU,wEACf,uBAAKA,UAAU,uBACZsB,IAGL,gBAAC,IAAD,CAAQe,QAASjB,EAAKiB,QAASC,UAAWlB,EAAKX,QAGpD,C,uBC7DD,IAuBI8B,EAvBmB,EAAQ,KAuBfC,EAAiB,SAASC,EAAQC,EAAMR,GACtD,OAAOO,GAAUP,EAAQ,IAAM,IAAMQ,EAAKC,aAC5C,IAEAC,EAAOC,QAAUN,C","sources":["webpack://myfol/./src/components/tags-link.js","webpack://myfol/./src/components/post-link.js","webpack://myfol/./src/pages/blog.js","webpack://myfol/./node_modules/lodash/kebabCase.js"],"sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\nimport _ from \"lodash\"\n\nconst TagsLink = ({ tag }) => (\n  <div key={tag.fieldValue} className=\"link-primary text-neutral\">\n    <Link to={`/tags/${_.kebabCase(tag.fieldValue)}/`} >\n      {_.startCase(tag.fieldValue)}\n      <span className=\"badge bg-amber-300 border-amber-300 text-gray-800 transform -translate-y-1 text-xs ml-1\">{tag.totalCount}</span>\n    </Link>\n  </div>\n)\n\nexport default TagsLink","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport _ from \"lodash\"\n\nconst PostLink = ({ post, author }) => (\n  <div className=\"mb-4 flex flex-col justify-start border p-4 rounded-md\">\n    <h3 className=\"lg:text-2xl text-zinc-700 link-primary\">\n      <Link to={`/blog${post.fields.slug}`}>\n        {post.frontmatter.title}\n      </Link>\n    </h3>\n    <div className=\"flex gap-1\">\n      {post.frontmatter.tags.map(tag => (\n        <div key={tag}>\n          <Link to={`/tags/${tag}`}>\n            <small className=\"my-1 italic bg-yellow-300 border-amber-300 text-gray-800 badge\">{_.startCase(tag)}</small>\n          </Link>\n        </div>\n      ))}\n    </div>\n    <div className=\"flex gap-2 mt-1\">\n      <p className=\"font-edu text-base\">By {post.frontmatter.author ? post.frontmatter.author : author}</p>\n      <p className=\"divider divider-horizontal py-1 mx-0\"></p>\n      <small>{post.frontmatter.date}</small>\n    </div>\n    <div>\n      {post.excerpt + ` `}\n      <Link to={`/blog${post.fields.slug}`} className=\"hover:text-primary\">\n        &rArr;{` more`}\n      </Link>\n    </div>\n  </div>\n)\n\nexport default PostLink","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { Helmet } from \"react-helmet\"\nimport Navbar from \"../components/navbar\"\nimport PostLink from \"../components/post-link\"\nimport TagsLink from \"../components/tags-link\"\nimport Footer from \"../components/footer\"\n\nconst IndexBlog = (\n  { data: {\n    siteSearchIndex,\n    allMarkdownRemark: { edges },\n    tagsPosts: { group },\n    site: { meta }\n  },\n  }) => {\n  const Posts = edges\n    .filter(edge => !!edge.node.frontmatter.date) // You can filter your posts based on some criteria\n    .map(edge => <PostLink key={edge.node.id} post={edge.node} author={meta.author} />)\n  const Tags = group\n    .map(tag => <TagsLink key={tag.fieldValue} tag={tag} />)\n  const bgImage = {\n    backgroundImage:\n      \"url('https://cdn.pixabay.com/photo/2019/01/17/23/14/work-3938875_960_720.jpg')\",\n  }\n\n  return (\n    <div>\n      <Helmet\n        title={`Blogs | ${meta.title}`}\n        meta={[\n          { name: 'description', content: `${meta.desc} by ${meta.author}` },\n          { name: 'keywords', content: 'blog, travel, hobby, daliy, activity, coding, photography' },\n        ]}\n      >\n      </Helmet>\n      <div className=\"px-4 lg:px-16 absolute z-10 bg-gray-100 bg-opacity-70 w-full\">\n        <Navbar menuLinks={meta.menuLinks} searchData={siteSearchIndex.index}/>\n      </div>\n      <div className=\"lg:h-screen h-[18rem] sm:h-[24rem] mb-8\">\n        <div style={bgImage} className=\"bg-cover w-full h-full bg-left relative\">\n          <div className=\"w-full h-full bg-gray-800 bg-opacity-40 flex justify-end items-center px-12 lg:px-28\">\n            <h1 className=\"lg:text-7xl sm:text-5xl text-white font-edu transform translate-y-16\">Welcome to Blog Post</h1>\n          </div>\n        </div>\n      </div>\n      <div className=\"flex flex-col-reverse lg:grid grid-cols-10 mx-6 lg:mx-14 lg:px-6 mt-2\">\n        <div className=\"col-span-1\">\n          <div>\n            <h3>Tags</h3>\n            {Tags}\n          </div>\n        </div>\n        <div className=\"divider divider-vertical lg:divider-horizontal px-2 lg:px-0 lg:py-4\"></div>\n        <div className=\"col-span-8 lg:-ml-8\">\n          {Posts}\n        </div>\n      </div>\n      <Footer socials={meta.socials} siteTitle={meta.title}/>\n    </div>\n  )\n}\n\nexport default IndexBlog\n\nexport const blogQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          excerpt(pruneLength: 200)\n          frontmatter {\n            date(formatString: \"dddd, Do MMMM YYYY\", locale: \"id-ID\")            \n            title\n            tags\n            author\n          }\n        }\n      }\n    }\n    tagsPosts: allMarkdownRemark(limit: 2000) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n    }\n    site {\n      meta: siteMetadata {\n        title\n        author\n        desc\n        menuLinks {\n          name\n          link\n        }\n        socials {\n          name\n          url\n        }\n      }\n    }\n    siteSearchIndex {\n      index\n    }\n  }\n`","var createCompounder = require('./_createCompounder');\n\n/**\n * Converts `string` to\n * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the kebab cased string.\n * @example\n *\n * _.kebabCase('Foo Bar');\n * // => 'foo-bar'\n *\n * _.kebabCase('fooBar');\n * // => 'foo-bar'\n *\n * _.kebabCase('__FOO_BAR__');\n * // => 'foo-bar'\n */\nvar kebabCase = createCompounder(function(result, word, index) {\n  return result + (index ? '-' : '') + word.toLowerCase();\n});\n\nmodule.exports = kebabCase;\n"],"names":["tag","key","fieldValue","className","Link","to","totalCount","post","author","fields","slug","frontmatter","title","tags","map","date","excerpt","data","siteSearchIndex","edges","allMarkdownRemark","group","tagsPosts","meta","site","Posts","filter","edge","node","id","Tags","Helmet","name","content","desc","menuLinks","searchData","index","style","backgroundImage","socials","siteTitle","kebabCase","createCompounder","result","word","toLowerCase","module","exports"],"sourceRoot":""}