{"version":3,"file":"component---src-templates-blog-tags-js-5676e16236157effcc7c.js","mappings":"gKAaA,IATiB,QAAC,IAAEA,GAAK,SACvB,uBAAK,aAAW,OAAOC,IAAKD,EAAIE,YAC9B,gBAAC,EAAAC,KAAI,CAACC,GAAE,SAAW,IAAYJ,EAAIE,YAAW,IAAKG,UAAU,mCAC1D,IAAYL,EAAIE,YACjB,wBAAMG,UAAU,0GAA0GL,EAAIM,aAE5H,C,mLCFO,SAASC,EAAS,GAAqE,IAAnEC,MAAQC,WAAW,MAAEC,GAAO,kBAAEC,GAAmB,YAAEC,GAAa,EAEjG,MAAM,MAAEC,EAAK,WAAEP,GAAeK,EACxBG,EAAOJ,EAAMK,KAAKf,GAAQ,gBAAC,IAAQ,CAACC,IAAKD,EAAIE,WAAYF,IAAKA,MAEpE,OACE,gBAAC,IAAK,KACJ,uBAAKK,UAAU,0DACb,uBAAKA,UAAU,cACb,sBAAIA,UAAU,sDACZ,uBAAKA,UAAU,wBACTC,EAAU,SAAuB,IAAfA,EAAmB,GAAK,MAEhD,2CAAsB,IAAaM,EAAYZ,KAAI,MAErD,uBAAKK,UAAU,6BACZQ,EAAME,KAAI,IAAe,IAAd,KAAEC,GAAM,EAClB,OACE,uBAAKf,IAAKe,EAAKC,OAAOC,KAAMb,UAAU,mDACpC,gBAAC,EAAAF,KAAI,CAACC,GAAE,QAAUY,EAAKC,OAAOC,MAC5B,sBAAIb,UAAU,0DACXW,EAAKG,YAAYC,QAGtB,0BAAKJ,EAAKG,YAAYE,MACtB,qBAAGhB,UAAU,iBAAiBW,EAAKM,SAC/B,MAKd,uBAAKjB,UAAU,4BACb,uBAAKA,UAAU,0BACb,gBAAC,EAAAF,KAAI,CAACC,GAAG,SACP,uBAAKC,UAAU,6HAA4H,cAI7I,uBAAKA,UAAU,6EACb,0BACE,8BAAQ,aAEV,uBAAKA,UAAU,wBAAwBS,OAOrD,CAyBO,SAASS,EAAK,GAAkB,IAAlB,YAAEX,GAAa,EAClC,MAAM,KAAEY,IAASC,EAAAA,EAAAA,KACjB,OACE,gCACE,6BAAW,IAAab,EAAYZ,KAAI,kBAAkBwB,EAAKJ,OAC/D,wBAAMM,KAAK,cAAcC,QAAYH,EAAKI,KAAI,YAAYJ,EAAKK,SAC/D,wBAAMH,KAAK,WAAWC,QAAQ,8DAGpC,C,uBC3FA,IAAIG,EAAW,EAAQ,MACnBC,EAAa,EAAQ,MAqBzBC,EAAOC,QAJP,SAAoBC,GAClB,OAAOH,EAAWD,EAASI,GAAQC,cACrC,C,uBCpBA,IAuBIC,EAvBmB,EAAQ,KAuBfC,EAAiB,SAASC,EAAQC,EAAMC,GACtD,OAAOF,GAAUE,EAAQ,IAAM,IAAMD,EAAKJ,aAC5C,IAEAH,EAAOC,QAAUG,C","sources":["webpack://myfol/./src/components/tags-link.js","webpack://myfol/./src/templates/blog-tags.js","webpack://myfol/./node_modules/lodash/capitalize.js","webpack://myfol/./node_modules/lodash/kebabCase.js"],"sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\nimport _ from \"lodash\"\n\nconst TagsLink = ({ tag }) => (\n  <div aria-label=\"tags\" key={tag.fieldValue}>\n    <Link to={`/tags/${_.kebabCase(tag.fieldValue)}/`} className=\"hover:text-sky-500 text-current\">\n      {_.startCase(tag.fieldValue)}\n      <span className=\"badge text-neutral-focus bg-neutral-content border-neutral-focus transform -translate-y-1 text-xs ml-1\">{tag.totalCount}</span>\n    </Link>\n  </div>\n)\n\nexport default TagsLink","import * as React from \"react\"\nimport _ from \"lodash\";\nimport PropTypes from \"prop-types\"\nimport { Link, graphql } from \"gatsby\"\nimport { useSiteMetadata } from \"../hooks/use-site-metadata\";\nimport TagsLink from \"../components/tags-link\"\nimport Frame from '../layouts/main'\n\nexport default function BlogTags({ data: { tagsPosts: { group }, allMarkdownRemark }, pageContext }) {\n\n  const { edges, totalCount } = allMarkdownRemark\n  const Tags = group.map((tag) => <TagsLink key={tag.fieldValue} tag={tag} />)\n\n  return (\n    <Frame>\n      <div className=\"mx-4 lg:mx-16 lg:grid gap-4 grid-flow-col grid-cols-10\">\n        <div className=\"col-span-8\">\n          <h4 className=\"flex justify-center gap-2 text-lg lg:text-2xl mb-6\">\n            <div className=\"italic font-semibold\">\n              {`${totalCount} Post${totalCount === 1 ? \"\" : \"s\"}`}\n            </div>\n            <div>{`tagged with \"${_.capitalize(pageContext.tag)}\"`}</div>\n          </h4>\n          <div className=\"grid md:grid-cols-2 gap-2\">\n            {edges.map(({ node }) => {\n              return (\n                <div key={node.fields.slug} className=\"p-4 rounded-lg border border-gray-300 shadow-lg\"                >\n                  <Link to={`/blog${node.fields.slug}`}>\n                    <h4 className=\"mb-2 leading-5 text-neutral font-semibold link-primary\">\n                      {node.frontmatter.title}\n                    </h4>\n                  </Link>\n                  <h5>{node.frontmatter.date}</h5>\n                  <p className=\"text-gray-500\">{node.excerpt}</p>\n                </div>\n              )\n            })}\n          </div>\n        </div>\n        <div className=\"col-span-2 mt-8 lg:mt-14\">\n          <div className=\"sticky top-2 space-y-4\">\n            <Link to=\"/blog\">\n              <div className=\"w-full font-semibold rounded-lg bg-inherit hover:bg-neutral-content hover:text-neutral-focus shadow-md shadow-current p-4\">\n                All Posts\n              </div>\n            </Link>\n            <div className=\"rounded-lg bg-inherit shadow-md shadow-current p-4 mt-2 lg:mt-0 space-y-2\">\n              <h4>\n                <strong>All Tags</strong>\n              </h4>\n              <div className=\"flex flex-wrap gap-2\">{Tags}</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Frame>\n  )\n}\n\nBlogTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport function Head({ pageContext }) {\n  const { meta } = useSiteMetadata()\n  return (\n    <>\n      <title>{`${_.capitalize(pageContext.tag)} | Blog Tags | ${meta.title}`}</title>\n      <meta name=\"description\" content={`${meta.desc} tags by ${meta.author}`} />\n      <meta name=\"keywords\" content=\"blog, travel, hobby, daliy, activity, coding, photography\" />\n    </>\n  )\n}\n\nexport const tagQuery = graphql`query ($tag: String) {\n  allMarkdownRemark(\n    limit: 2000\n    sort: {frontmatter: {date: DESC}}\n    filter: {frontmatter: {tags: {in: [$tag]}}}\n  ) {\n    totalCount\n    edges {\n      node {\n        fields {\n          slug\n        }\n        excerpt(pruneLength: 250)\n        frontmatter {\n          title\n          date(formatString: \"dddd, Do MMMM YYYY\", locale: \"id-ID\")\n          tags\n        }\n      }\n    }\n  }\n  tagsPosts: allMarkdownRemark(limit: 2000) {\n    group(field: {frontmatter: {tags: SELECT}}) {\n      fieldValue\n      totalCount\n    }\n  }\n}`\n","var toString = require('./toString'),\n    upperFirst = require('./upperFirst');\n\n/**\n * Converts the first character of `string` to upper case and the remaining\n * to lower case.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to capitalize.\n * @returns {string} Returns the capitalized string.\n * @example\n *\n * _.capitalize('FRED');\n * // => 'Fred'\n */\nfunction capitalize(string) {\n  return upperFirst(toString(string).toLowerCase());\n}\n\nmodule.exports = capitalize;\n","var createCompounder = require('./_createCompounder');\n\n/**\n * Converts `string` to\n * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the kebab cased string.\n * @example\n *\n * _.kebabCase('Foo Bar');\n * // => 'foo-bar'\n *\n * _.kebabCase('fooBar');\n * // => 'foo-bar'\n *\n * _.kebabCase('__FOO_BAR__');\n * // => 'foo-bar'\n */\nvar kebabCase = createCompounder(function(result, word, index) {\n  return result + (index ? '-' : '') + word.toLowerCase();\n});\n\nmodule.exports = kebabCase;\n"],"names":["tag","key","fieldValue","Link","to","className","totalCount","BlogTags","data","tagsPosts","group","allMarkdownRemark","pageContext","edges","Tags","map","node","fields","slug","frontmatter","title","date","excerpt","Head","meta","useSiteMetadata","name","content","desc","author","toString","upperFirst","module","exports","string","toLowerCase","kebabCase","createCompounder","result","word","index"],"sourceRoot":""}