{"version":3,"file":"component---src-templates-blog-tags-js-889ffd2bd0d91bac1f2a.js","mappings":"gKAaA,IATiB,SAAH,OAAMA,EAAG,EAAHA,IAAG,OACrB,uBAAKC,IAAKD,EAAIE,WAAYC,UAAU,6BAClC,gBAAC,EAAAC,KAAI,CAACC,GAAE,SAAW,IAAYL,EAAIE,YAAW,KAC3C,IAAYF,EAAIE,YACjB,wBAAMC,UAAU,2FAA2FH,EAAIM,aAE7G,C,4ICoFR,UAvFiB,SAAH,GAMP,IAAD,IALJC,KACeC,EAAK,EAAlBC,UAAaD,MACbE,EAAiB,EAAjBA,kBAIMV,EAFG,EAAXW,YAEQX,IACAY,EAAsBF,EAAtBE,MAAON,EAAeI,EAAfJ,WACTO,EAAOL,EAAMM,KAAI,SAACd,GAAG,OAAK,gBAAC,IAAQ,CAACC,IAAKD,EAAIE,WAAYF,IAAKA,GAAO,IAG3E,OACE,gBAAC,IAAK,KACJ,uBAAKG,UAAU,0DACb,uBAAKA,UAAU,cACb,sBAAIA,UAAU,sDACZ,uBAAKA,UAAU,wBAA2BG,EAAU,SACnC,IAAfA,EAAmB,GAAK,MAE1B,2CAAsB,IAAaN,GAAI,MAEzC,uBAAKG,UAAU,6BACZS,EAAME,KAAI,YAAe,IAAZC,EAAI,EAAJA,KACJC,EAASD,EAAKE,OAAdD,KACAE,EAAYH,EAAZG,QACR,EAAwBH,EAAKI,YAArBC,EAAK,EAALA,MAAOC,EAAI,EAAJA,KACf,OACE,uBACEpB,IAAKe,EACLb,UAAU,mDAEV,gBAAC,EAAAC,KAAI,CAACC,GAAE,QAAUW,GAChB,sBAAIb,UAAU,0DACXiB,IAGL,0BAAKC,GACL,qBAAGlB,UAAU,iBAAiBe,GAGpC,MAGJ,uBAAKf,UAAU,4BACb,uBAAKA,UAAU,0BACb,gBAAC,EAAAC,KAAI,CAACC,GAAG,SACP,uBAAKF,UAAU,mGAAkG,cAInH,uBAAKA,UAAU,+DACb,0BACE,8BAAQ,aAEV,uBAAKA,UAAU,wBAAwBU,OAOrD,EA2BO,IAAMS,EAAO,SAAH,OAELC,EAAI,EADdhB,KACEiB,KAAQD,KAEVZ,EAAW,EAAXA,YAAW,OAEX,gCACE,6BAAW,IAAaA,EAAYX,KAAI,kBACtCuB,EAAKH,OAEP,wBAAMK,KAAK,cAAcC,QAAYH,EAAKI,KAAI,OAAOJ,EAAKK,SAC1D,wBACEH,KAAK,WACLC,QAAQ,8DAET,C,uBC/GL,IAAIG,EAAW,EAAQ,MACnBC,EAAa,EAAQ,MAqBzBC,EAAOC,QAJP,SAAoBC,GAClB,OAAOH,EAAWD,EAASI,GAAQC,cACrC,C,uBCpBA,IAuBIC,EAvBmB,EAAQ,KAuBfC,EAAiB,SAASC,EAAQC,EAAMC,GACtD,OAAOF,GAAUE,EAAQ,IAAM,IAAMD,EAAKJ,aAC5C,IAEAH,EAAOC,QAAUG,C","sources":["webpack://myfol/./src/components/tags-link.js","webpack://myfol/./src/templates/blog-tags.js","webpack://myfol/./node_modules/lodash/capitalize.js","webpack://myfol/./node_modules/lodash/kebabCase.js"],"sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\nimport _ from \"lodash\"\n\nconst TagsLink = ({ tag }) => (\n  <tag key={tag.fieldValue} className=\"link-primary text-neutral\">\n    <Link to={`/tags/${_.kebabCase(tag.fieldValue)}/`} >\n      {_.startCase(tag.fieldValue)}\n      <span className=\"badge bg-amber-300 border-amber-300 text-gray-800 transform -translate-y-1 text-xs ml-1\">{tag.totalCount}</span>\n    </Link>\n  </tag>\n)\n\nexport default TagsLink","import * as React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link, graphql } from \"gatsby\";\nimport _ from \"lodash\";\nimport TagsLink from \"../components/tags-link\";\nimport Frame from \"../layouts/template\";\n\nconst BlogTags = ({\n  data: {\n    tagsPosts: { group },\n    allMarkdownRemark,\n  },\n  pageContext,\n}) => {\n  const { tag } = pageContext;\n  const { edges, totalCount } = allMarkdownRemark;\n  const Tags = group.map((tag) => <TagsLink key={tag.fieldValue} tag={tag} />);\n  // const tagHeader = `${totalCount} post${totalCount === 1 ? \"\" : \"s\"} tagged with \"${tag}\"`\n\n  return (\n    <Frame>\n      <div className=\"mx-4 lg:mx-16 lg:grid gap-4 grid-flow-col grid-cols-10\">\n        <div className=\"col-span-8\">\n          <h4 className=\"flex justify-center gap-2 text-lg lg:text-2xl mb-6\">\n            <div className=\"italic font-semibold\">{`${totalCount} Post${\n              totalCount === 1 ? \"\" : \"s\"\n            }`}</div>\n            <div>{`tagged with \"${_.capitalize(tag)}\"`}</div>\n          </h4>\n          <div className=\"grid md:grid-cols-2 gap-2\">\n            {edges.map(({ node }) => {\n              const { slug } = node.fields;\n              const { excerpt } = node;\n              const { title, date } = node.frontmatter;\n              return (\n                <div\n                  key={slug}\n                  className=\"p-4 rounded-lg border border-gray-300 shadow-lg\"\n                >\n                  <Link to={`/blog${slug}`}>\n                    <h4 className=\"mb-2 leading-5 text-neutral font-semibold link-primary\">\n                      {title}\n                    </h4>\n                  </Link>\n                  <h5>{date}</h5>\n                  <p className=\"text-gray-500\">{excerpt}</p>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n        <div className=\"col-span-2 mt-8 lg:mt-14\">\n          <div className=\"sticky top-2 space-y-4\">\n            <Link to=\"/blog\">\n              <div className=\"w-full font-semibold rounded-lg bg-gray-200 hover:bg-gray-600 hover:text-gray-100 shadow-lg p-4\">\n                All Posts\n              </div>\n            </Link>\n            <div className=\"rounded-lg bg-gray-200 shadow-lg p-4 mt-2 lg:mt-0 space-y-2\">\n              <h4>\n                <strong>All Tags</strong>\n              </h4>\n              <div className=\"flex flex-wrap gap-2\">{Tags}</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Frame>\n  );\n};\n\nBlogTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n};\n\nexport default BlogTags;\n\nexport const Head = ({\n  data: {\n    site: { meta },\n  },\n  pageContext,\n}) => (\n  <>\n    <title>{`${_.capitalize(pageContext.tag)} | Blog Tags | ${\n      meta.title\n    }`}</title>\n    <meta name=\"description\" content={`${meta.desc} by ${meta.author}`} />\n    <meta\n      name=\"keywords\"\n      content=\"blog, travel, hobby, daliy, activity, coding, photography\"\n    />\n  </>\n);\n\nexport const tagQuery = graphql`\n  query ($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          excerpt(pruneLength: 250)\n          frontmatter {\n            title\n            date(formatString: \"dddd, Do MMMM YYYY\", locale: \"id-ID\")\n            tags\n          }\n        }\n      }\n    }\n    tagsPosts: allMarkdownRemark(limit: 2000) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n    }\n    site {\n      meta: siteMetadata {\n        title\n        desc\n        author\n      }\n    }\n  }\n`;\n","var toString = require('./toString'),\n    upperFirst = require('./upperFirst');\n\n/**\n * Converts the first character of `string` to upper case and the remaining\n * to lower case.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to capitalize.\n * @returns {string} Returns the capitalized string.\n * @example\n *\n * _.capitalize('FRED');\n * // => 'Fred'\n */\nfunction capitalize(string) {\n  return upperFirst(toString(string).toLowerCase());\n}\n\nmodule.exports = capitalize;\n","var createCompounder = require('./_createCompounder');\n\n/**\n * Converts `string` to\n * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the kebab cased string.\n * @example\n *\n * _.kebabCase('Foo Bar');\n * // => 'foo-bar'\n *\n * _.kebabCase('fooBar');\n * // => 'foo-bar'\n *\n * _.kebabCase('__FOO_BAR__');\n * // => 'foo-bar'\n */\nvar kebabCase = createCompounder(function(result, word, index) {\n  return result + (index ? '-' : '') + word.toLowerCase();\n});\n\nmodule.exports = kebabCase;\n"],"names":["tag","key","fieldValue","className","Link","to","totalCount","data","group","tagsPosts","allMarkdownRemark","pageContext","edges","Tags","map","node","slug","fields","excerpt","frontmatter","title","date","Head","meta","site","name","content","desc","author","toString","upperFirst","module","exports","string","toLowerCase","kebabCase","createCompounder","result","word","index"],"sourceRoot":""}