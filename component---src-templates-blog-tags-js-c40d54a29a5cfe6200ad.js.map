{"version":3,"file":"component---src-templates-blog-tags-js-c40d54a29a5cfe6200ad.js","mappings":"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","sources":["webpack://myfol/./src/templates/blog-tags.js","webpack://myfol/./node_modules/lodash/_asciiToArray.js","webpack://myfol/./node_modules/lodash/_baseSlice.js","webpack://myfol/./node_modules/lodash/_castSlice.js","webpack://myfol/./node_modules/lodash/_createCaseFirst.js","webpack://myfol/./node_modules/lodash/_hasUnicode.js","webpack://myfol/./node_modules/lodash/_stringToArray.js","webpack://myfol/./node_modules/lodash/_unicodeToArray.js","webpack://myfol/./node_modules/lodash/capitalize.js","webpack://myfol/./node_modules/lodash/upperFirst.js"],"sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Link, graphql } from \"gatsby\"\nimport _ from \"lodash\"\nimport Navbar from \"../components/blog-nav\"\n\nconst Tags = ({ pageContext, data }) => {\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  // const tagHeader = `${totalCount} post${totalCount === 1 ? \"\" : \"s\"} tagged with \"${tag}\"`\n\n  return (\n    <div>\n      <div className=\"mx-4 lg:mx-16\">\n        <Navbar />\n        <h4 className=\"flex justify-center gap-2 text-lg lg:text-2xl mb-6\">\n          <div className=\"italic font-semibold\">{`${totalCount} Post${totalCount === 1 ? \"\" : \"s\"}`}</div>\n          <div>{`tagged with \"${_.capitalize(tag)}\"`}</div>\n        </h4>\n        <div className=\"grid md:grid-cols-2 gap-2\">\n          {edges.map(({ node }) => {\n            const { slug } = node.fields\n            const { excerpt } = node\n            const { title, date } = node.frontmatter\n            return (\n              <div key={slug} className=\"p-4 rounded-lg border border-gray-300 shadow-lg\">\n                <Link to={`/blog${slug}`}>\n                  <h3 className=\"mb-2 leading-5 text-neutral link-primary\">{title}</h3>\n                </Link>\n                <h5>{date}</h5>\n                <p>{excerpt}</p>\n              </div>\n            )\n          })}\n        </div>\n        <div className=\"font-semibold rounded-lg bg-gray-200 hover:bg-gray-600 hover:text-gray-100 shadow-lg p-4 w-max mt-4\">\n          <Link to=\"/blogs\">All Posts</Link>\n        </div>\n      </div>\n      <div className=\"mt-8 py-2\">\n        <div className=\"col-span-6 flex justify-center w-full mb-4\">Â© 2022 Samsul Muarrif</div>\n      </div>\n    </div>\n  )\n}\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          excerpt(pruneLength: 250)\n          frontmatter {\n            title\n            date(formatString: \"dddd, Do MMMM YYYY\", locale: \"id-ID\")\n            tags\n          }\n        }\n      }\n    }\n  }\n`","/**\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction asciiToArray(string) {\n  return string.split('');\n}\n\nmodule.exports = asciiToArray;\n","/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\nmodule.exports = baseSlice;\n","var baseSlice = require('./_baseSlice');\n\n/**\n * Casts `array` to a slice if it's needed.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {number} start The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the cast slice.\n */\nfunction castSlice(array, start, end) {\n  var length = array.length;\n  end = end === undefined ? length : end;\n  return (!start && end >= length) ? array : baseSlice(array, start, end);\n}\n\nmodule.exports = castSlice;\n","var castSlice = require('./_castSlice'),\n    hasUnicode = require('./_hasUnicode'),\n    stringToArray = require('./_stringToArray'),\n    toString = require('./toString');\n\n/**\n * Creates a function like `_.lowerFirst`.\n *\n * @private\n * @param {string} methodName The name of the `String` case method to use.\n * @returns {Function} Returns the new case function.\n */\nfunction createCaseFirst(methodName) {\n  return function(string) {\n    string = toString(string);\n\n    var strSymbols = hasUnicode(string)\n      ? stringToArray(string)\n      : undefined;\n\n    var chr = strSymbols\n      ? strSymbols[0]\n      : string.charAt(0);\n\n    var trailing = strSymbols\n      ? castSlice(strSymbols, 1).join('')\n      : string.slice(1);\n\n    return chr[methodName]() + trailing;\n  };\n}\n\nmodule.exports = createCaseFirst;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsZWJ = '\\\\u200d';\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\nmodule.exports = hasUnicode;\n","var asciiToArray = require('./_asciiToArray'),\n    hasUnicode = require('./_hasUnicode'),\n    unicodeToArray = require('./_unicodeToArray');\n\n/**\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction stringToArray(string) {\n  return hasUnicode(string)\n    ? unicodeToArray(string)\n    : asciiToArray(string);\n}\n\nmodule.exports = stringToArray;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction unicodeToArray(string) {\n  return string.match(reUnicode) || [];\n}\n\nmodule.exports = unicodeToArray;\n","var toString = require('./toString'),\n    upperFirst = require('./upperFirst');\n\n/**\n * Converts the first character of `string` to upper case and the remaining\n * to lower case.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to capitalize.\n * @returns {string} Returns the capitalized string.\n * @example\n *\n * _.capitalize('FRED');\n * // => 'Fred'\n */\nfunction capitalize(string) {\n  return upperFirst(toString(string).toLowerCase());\n}\n\nmodule.exports = capitalize;\n","var createCaseFirst = require('./_createCaseFirst');\n\n/**\n * Converts the first character of `string` to upper case.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.upperFirst('fred');\n * // => 'Fred'\n *\n * _.upperFirst('FRED');\n * // => 'FRED'\n */\nvar upperFirst = createCaseFirst('toUpperCase');\n\nmodule.exports = upperFirst;\n"],"names":["pageContext","data","tag","allMarkdownRemark","edges","totalCount","className","map","node","slug","fields","excerpt","frontmatter","title","date","key","Link","to","module","exports","string","split","array","start","end","index","length","result","Array","baseSlice","undefined","castSlice","hasUnicode","stringToArray","toString","methodName","strSymbols","chr","charAt","trailing","join","slice","reHasUnicode","RegExp","test","asciiToArray","unicodeToArray","rsAstral","rsCombo","rsFitz","rsNonAstral","rsRegional","rsSurrPair","reOptMod","rsOptVar","rsSeq","rsSymbol","reUnicode","match","upperFirst","toLowerCase","createCaseFirst"],"sourceRoot":""}