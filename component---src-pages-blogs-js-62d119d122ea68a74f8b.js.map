{"version":3,"file":"component---src-pages-blogs-js-62d119d122ea68a74f8b.js","mappings":"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","sources":["webpack://myfol/./src/components/post-link.js","webpack://myfol/./src/pages/blogs.js","webpack://myfol/./node_modules/lodash/_asciiToArray.js","webpack://myfol/./node_modules/lodash/_baseSlice.js","webpack://myfol/./node_modules/lodash/_castSlice.js","webpack://myfol/./node_modules/lodash/_createCaseFirst.js","webpack://myfol/./node_modules/lodash/_hasUnicode.js","webpack://myfol/./node_modules/lodash/_stringToArray.js","webpack://myfol/./node_modules/lodash/_unicodeToArray.js","webpack://myfol/./node_modules/lodash/startCase.js","webpack://myfol/./node_modules/lodash/upperFirst.js"],"sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\nimport _ from \"lodash\"\n\nconst PostLink = ({ post, author }) => (\n  <div className=\"my-4 flex flex-col justify-start\">\n    <h3 className=\"lg:text-2xl\">\n      <Link to={`/blog${post.fields.slug}`}>\n        {post.frontmatter.title}\n      </Link>\n    </h3>\n    <small className=\"italic bg-yellow-300 px-2 pb-1 w-max\">{_.startCase(post.frontmatter.tags)}</small>\n    <div className=\"flex gap-2 mt-1\">\n      <p className=\"font-edu text-base\">By {author}</p>\n      <p className=\"divider divider-horizontal py-1 mx-0\"></p>\n      <small>{post.frontmatter.date}</small>\n    </div>\n    <div>\n      {post.excerpt}\n    </div>\n  </div>\n)\n\nexport default PostLink","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport { Helmet } from \"react-helmet\"\nimport _ from \"lodash\"\nimport PostLink from \"../components/post-link\"\nimport Navbar from \"../components/blog-nav\"\n\nconst IndexBlog = (\n  {\n    data: {\n      allMarkdownRemark: { edges },\n      tagsPosts: { group },\n      site: { siteMetadata: { title, author, desc } }\n    },\n  }) => {\n  const Posts = edges\n    .filter(edge => !!edge.node.frontmatter.date) // You can filter your posts based on some criteria\n    .map(edge => <PostLink key={edge.node.id} post={edge.node} author={author} />)\n\n  return (\n    <div>\n      <Helmet\n        title={`Blogs | ${title}`}\n        meta={[\n          { name: 'description', content: `${desc} by ${author}` },\n          { name: 'keywords', content: 'blog, travel, hobby, daliy, activity, coding, photography' },\n        ]}\n      >\n      </Helmet>\n      <div className=\"mx-8 lg:mx-16\">\n        <Navbar />\n      </div>\n      <div className=\"lg:grid grid-cols-8 mx-8 lg:mx-14 lg:px-6 mt-4\">\n        <div className=\"col-span-6\">\n          {Posts}\n        </div>\n        <div className=\"col-span-2 mt-16 lg:mt-0\">\n          <div>\n            <Link to=\"/tags\">\n              <h3 className=\"mb-4 link-primary text-neutral\">Tags</h3>\n            </Link>\n            <ul>\n              {group.map(tag => (\n                <li key={tag.fieldValue} className=\"link-primary text-neutral\">\n                  <Link to={`/tags/${_.kebabCase(tag.fieldValue)}/`}>\n                    {_.startCase(tag.fieldValue)}\n                    <span className=\"px-2 rounded-lg ml-1 text-sm bg-slate-400 text-white\">{tag.totalCount}</span>\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default IndexBlog\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          excerpt(pruneLength: 250)\n          frontmatter {\n            date(formatString: \"dddd, Do MMMM YYYY\", locale: \"id-ID\")            \n            title\n            tags\n          }\n        }\n      }\n    }\n    tagsPosts: allMarkdownRemark(limit: 2000) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n    }\n    site {\n      siteMetadata {\n        title\n        author\n        desc\n      }\n    }\n  }\n`","/**\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction asciiToArray(string) {\n  return string.split('');\n}\n\nmodule.exports = asciiToArray;\n","/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\nmodule.exports = baseSlice;\n","var baseSlice = require('./_baseSlice');\n\n/**\n * Casts `array` to a slice if it's needed.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {number} start The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the cast slice.\n */\nfunction castSlice(array, start, end) {\n  var length = array.length;\n  end = end === undefined ? length : end;\n  return (!start && end >= length) ? array : baseSlice(array, start, end);\n}\n\nmodule.exports = castSlice;\n","var castSlice = require('./_castSlice'),\n    hasUnicode = require('./_hasUnicode'),\n    stringToArray = require('./_stringToArray'),\n    toString = require('./toString');\n\n/**\n * Creates a function like `_.lowerFirst`.\n *\n * @private\n * @param {string} methodName The name of the `String` case method to use.\n * @returns {Function} Returns the new case function.\n */\nfunction createCaseFirst(methodName) {\n  return function(string) {\n    string = toString(string);\n\n    var strSymbols = hasUnicode(string)\n      ? stringToArray(string)\n      : undefined;\n\n    var chr = strSymbols\n      ? strSymbols[0]\n      : string.charAt(0);\n\n    var trailing = strSymbols\n      ? castSlice(strSymbols, 1).join('')\n      : string.slice(1);\n\n    return chr[methodName]() + trailing;\n  };\n}\n\nmodule.exports = createCaseFirst;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsZWJ = '\\\\u200d';\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\nmodule.exports = hasUnicode;\n","var asciiToArray = require('./_asciiToArray'),\n    hasUnicode = require('./_hasUnicode'),\n    unicodeToArray = require('./_unicodeToArray');\n\n/**\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction stringToArray(string) {\n  return hasUnicode(string)\n    ? unicodeToArray(string)\n    : asciiToArray(string);\n}\n\nmodule.exports = stringToArray;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction unicodeToArray(string) {\n  return string.match(reUnicode) || [];\n}\n\nmodule.exports = unicodeToArray;\n","var createCompounder = require('./_createCompounder'),\n    upperFirst = require('./upperFirst');\n\n/**\n * Converts `string` to\n * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n *\n * @static\n * @memberOf _\n * @since 3.1.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the start cased string.\n * @example\n *\n * _.startCase('--foo-bar--');\n * // => 'Foo Bar'\n *\n * _.startCase('fooBar');\n * // => 'Foo Bar'\n *\n * _.startCase('__FOO_BAR__');\n * // => 'FOO BAR'\n */\nvar startCase = createCompounder(function(result, word, index) {\n  return result + (index ? ' ' : '') + upperFirst(word);\n});\n\nmodule.exports = startCase;\n","var createCaseFirst = require('./_createCaseFirst');\n\n/**\n * Converts the first character of `string` to upper case.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.upperFirst('fred');\n * // => 'Fred'\n *\n * _.upperFirst('FRED');\n * // => 'FRED'\n */\nvar upperFirst = createCaseFirst('toUpperCase');\n\nmodule.exports = upperFirst;\n"],"names":["post","author","className","Link","to","fields","slug","frontmatter","title","tags","date","excerpt","data","edges","allMarkdownRemark","group","tagsPosts","site","siteMetadata","desc","Posts","filter","edge","node","map","key","id","Helmet","meta","name","content","tag","fieldValue","totalCount","module","exports","string","split","array","start","end","index","length","result","Array","baseSlice","undefined","castSlice","hasUnicode","stringToArray","toString","methodName","strSymbols","chr","charAt","trailing","join","slice","reHasUnicode","RegExp","test","asciiToArray","unicodeToArray","rsAstral","rsCombo","rsFitz","rsNonAstral","rsRegional","rsSurrPair","reOptMod","rsOptVar","rsSeq","rsSymbol","reUnicode","match","createCompounder","upperFirst","startCase","word","createCaseFirst"],"sourceRoot":""}